scalar LocalDate


input ScholarshipInput {
    title:String
    description:String
    last_date:LocalDate
    days_left:Int
    total:Int
    purpose:String
    sorts:[SortInput!]
}

input OrganisationInput {
    orgName:String
    origin_country:String
    founded:Int
}

input RequirementInput {
    title:String
    description:String
}

input CreateScholarshipInput {
    title: String!
    description: String!
    last_date: LocalDate
    days_left: Int!
    total: Int!
    purpose: String!
    organisations_id: ID!
}

input CreateOrganisationInput {
    org_name:String!
    description:String!
    origin_country:String!
    founded:Int!
}

input CreateRequirementInput {
    title:String!
    description:String!
    scholarships_id:ID!
}

type Mutation {
    createScholarship(input: CreateScholarshipInput!): Scholarship!
    createOrganisation(input: CreateOrganisationInput!): Organisation!
    createRequirement(input: CreateRequirementInput!): Requirement!
}

type Organisation {
    id:ID
    org_name:String
    origin_country:String
    founded:Int
    scholarships:[Scholarship]
}

type Query {
    scholarships(scholarshipInput: ScholarshipInput): [Scholarship]
    scholarshipById(id: ID!): Scholarship
    organisations(organisationInput: OrganisationInput): [Organisation]
    organisationById(id: ID!): Organisation
    requirements(requirementInput: RequirementInput): [Requirement]
    requirementById(id: ID!): Requirement
}

type Requirement {
    id:ID
    title:String
    description:String
}

type Scholarship {
    id:ID
    title:String
    description:String
    last_date:LocalDate
    days_left:Int
    total:Int
    purpose:String
    requirements:[Requirement]
}

enum SortDirection {
    ASCENDING
    DESCENDING
}

input SortInput {
    field: String!
    direction: SortDirection!
}
